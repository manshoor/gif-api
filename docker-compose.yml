services:
  nginx:
#    container_name: reverse-proxy
    user: root
    image: nginx:stable-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    volumes:
      - ./nginx/default.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx/:/var/log/nginx
    environment:
      - NODE_ENV=development
    depends_on:
      - app
    networks:
      - app-network
  app:
    image: manshooras/screenshot-service:latest
    init: true  # Add this to handle zombie processes better
    cap_add:
      - SYS_ADMIN  # This helps with Chrome's sandbox
    shm_size: '2gb'
    ulimits:
      core: 0
      nofile:
        soft: 65536
        hard: 65536
    security_opt:
      - seccomp=unconfined
    build: .
#    container_name: screenshot-service
    env_file: .env
    ports:
      - "3000:3000"
    volumes:
      - .:/usr/src/app
      - ./public:/usr/src/app/public
      - /usr/src/app/node_modules
      - /dev/shm:/dev/shm
      - ./logs/node:/usr/src/app/logs
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium
      - REDIS_URL=redis
      - PUPPETEER_DISABLE_CRASHPAD=true
      - CHROME_LAUNCH_ARGS=--disable-http2,--use-fake-ui-for-media-stream,--use-fake-device-for-media-stream,--no-sandbox,--disable-dev-shm-usage
      - PUPPETEER_SKIP_CHROME_HEADLESS_SHELL=true
      - PULSEAUDIO_SERVER=dummy
      - ALSA_CARD=none
      - AUDIO_DRIVER=null
      - DBUS_SESSION_BUS_ADDRESS=/dev/null
      - DISABLE_CRASHPAD=true
      - CHROMIUM_FLAGS=--disable-gpu,--no-sandbox,--disable-dev-shm-usage
    tmpfs:
      - /tmp
      - /run
      - /run/lock
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/health"]
      interval: 45s
      timeout: 20s
      retries: 3
      start_period: 60s
    networks:
      - app-network

  redis:
    image: redis:7-alpine
#    container_name: screenshot-service-redis
    command: redis-server --appendonly yes
    volumes:
      - ./data/redis:/data
      - ./logs/redis:/var/log/redis:rw
    ports:
      - "6379:6379"
    environment:
      - REDIS_MAXMEMORY=1gb
      - REDIS_MAXMEMORY_POLICY=allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - app-network

volumes:
  redis-data:
    driver: local

networks:
  app-network:
    driver: overlay
    attachable: true