user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
timer_resolution 100ms;
pcre_jit on;

events {
    worker_connections 16384;
    multi_accept on;
    use epoll;
    accept_mutex off;
}

http {
    include /etc/nginx/mime.types;
    default_type application/json;

    log_format api_json escape=json '{'
        '"timestamp":"$time_local",'
        '"client":"$remote_addr",'
        '"request":"$request",'
        '"status":$status,'
        '"bytes_sent":$bytes_sent,'
        '"request_time":$request_time,'
        '"upstream_time":"$upstream_response_time"'
    '}';

    access_log /var/log/nginx/access.log api_json buffer=32k flush=3s;
    error_log /var/log/nginx/error.log warn;

    # Timeouts
    keepalive_timeout 65;
    keepalive_requests 1000;
    client_body_buffer_size 128k;
    client_max_body_size 50m;
    client_body_timeout 60s;
    client_header_timeout 60s;
    send_timeout 60s;
    reset_timedout_connection on;

    # Proxy settings
    proxy_buffer_size 32k;
    proxy_buffers 8 32k;
    proxy_busy_buffers_size 64k;

    # Performance
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    server_tokens off;

    # Compression
    gzip on;
    gzip_comp_level 6;
    gzip_min_length 1000;
    gzip_types application/json image/jpeg image/png image/gif;
    gzip_vary on;

    # SSL
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=100r/s;
    limit_conn_zone $binary_remote_addr zone=addr:10m;

    upstream api_servers {
        least_conn;
        server app:3000 max_fails=3 fail_timeout=30s;
        keepalive 64;
    }

    server {
        listen 80 backlog=65535;
        listen [::]:80 backlog=65535;
        server_name screenshot;

        # Security headers
        add_header X-Frame-Options "DENY" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Content-Security-Policy "default-src 'none'; img-src 'self'" always;

        location / {
            proxy_pass http://api_servers;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $host;

            # Rate limiting
            limit_req zone=api_limit burst=50 nodelay;
            limit_conn addr 10;

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;

            # Error handling
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 10s;

            access_log /var/log/nginx/api_access.log api_json buffer=32k flush=3s;
        }

        # Public assets handling
        location /public {
            alias /usr/share/nginx/html/public;
            expires 30d;
            add_header Cache-Control "public, no-transform" always;
        }

        location = /health {
            access_log off;
            return 200 '{"status":"healthy"}';
        }

        # Deny access to hidden files
        location ~ /\. {
            deny all;
        }

        # Deny access to sensitive files
        location ~* (\.env|\.git|\.htaccess|\.htpasswd|\.svn|\.idea|\.DS_Store) {
            deny all;
        }

        # JSON-formatted error responses
        error_page 400 401 403 404 429 500 502 503 504 /error;
        location = /error {
            internal;
            return 500 '{"error":"$status","message":"An error occurred"}';
        }
    }
}